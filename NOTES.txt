#! Ultimate Docker Series Notes

#! Introduction
This is a zero to hero tutorial on how to build and run containers in docker.
* We will cover learn docker with full stack application consisting of Frontend, Backend and Database.
* This will be a highly comprehensive and practical tutorial.

#! Prerequisites
1. No pre-requisites required.
2. Knowledge of basic Frontend, Backend and Database.
3. Basic familiarity with Git.

#! How to follow this course
1. Make notes 
2. Keywords
3. Play along with the commands

---------------------------------------------------------------------------------------------------------------------------------------------------------------

#* Section - 1 - Docker Basics
* What is Docker?
* Virtual Machine vs containers
* Architecture of Docker
* Installing Docker
* Development Workflow

#! What is Docker?
Docker is an open-source platform that automates the deployment, scaling, and management of applications using containerization technology. Containers allow developers to package up an application with all its dependencies into a standardized unit for software development. This ensures that the application runs quickly and reliably from one computing environment to another.

** Key Concepts
Container: A lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.
Image: A read-only template with instructions for creating a Docker container. Images are built from a "Dockerfile" which contains a list of commands that the Docker daemon uses to build an image.
Docker Daemon: The background service running on the host that manages building, running, and distributing Docker containers.
Docker Client: The command-line tool or API that allows users to talk to the Docker daemon.

#TODO => Refer the architecture diagram of Docker

* A platform for building, running, and shipping applications
* Prevents the issue of "It works on my machine..."
Solves issues like:
a) One or more files missing
b) Software version mismatch
c) Different configuration settings

* With docker, we can easily package up our application and run it on any machine.
* If someone new joins the team, they can install docker and run their application.

* docker-compose up => used to run multiple containers
* docker-compose down => used to stop multiple containers
* docker-compose dowm -rmi all => used to stop and remove all containers

#! Virtual Machine vs containers
* Virtual Machine: A physical machine that is used for running applications in a virtualized environment. This is used in a variety of applications.
* Container: A lightweight, standalone, executable package that includes everything needed to run a piece of software, including the code, a runtime, libraries, environment variables, and config files.

Problems with Virtual Machine:
a) Each VM needs a full-blown OS
b) Slow to start
c) Resource intensive

Benifits of Containers:
a) Allow running multiple apps in isolation
b) Lightweight
c) Use OS of the host machine
d) Start quickly
e) Need less hardware resources

#! Architecture of Docker
* Docker uses a client server architecture
* A kernel manages applications and hardware resources
* Docker's architecture is designed to simplify the deployment and scaling of applications by packaging them in containers along with their dependencies. This ensures consistency across different stages of the application lifecycle, from development to testing to production. The combination of Docker images, containers, the Docker engine, and the client-server model provides a powerful and flexible platform for modern application development and deployment.

#! Installing Docker
* If you already have docker, find its version using "docker version"
"
PS D:\Ultimate-Docker-Series> docker version
Client:
 Version:           27.0.3
 API version:       1.46
 Go version:        go1.21.11
 Git commit:        7d4bcd8
 Built:             Sat Jun 29 00:03:32 2024
 OS/Arch:           windows/amd64
 Context:           desktop-linux
"
* Go to the official docker website and download docker using "download from docker hub" 
* Then setup the WSL2 too if you encounter any issues.

* To verify that Docker is installed correctly, open a Command Prompt window and type To verify that Docker is installed correctly, open a Command Prompt window and type docker run hello-world. This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.. This command downloads a test image and runs it in a container. When the container runs, it prints an informational message and exits.
"
PS D:\Ultimate-Docker-Series> docker run hello-world
Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
c1ec31eb5944: Pull complete
Digest: sha256:1408fec50309afee38f3535383f5b09419e6dc0925bc69891e79d84cc4cdcec6
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
 1. The Docker client contacted the Docker daemon.
 2. The Docker daemon pulled the "hello-world" image from the Docker Hub. (amd64)
 3. The Docker daemon created a new container from that image which runs the executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it to your terminal.

To try something more ambitious, you can run an Ubuntu container with: $ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID: https://hub.docker.com/

For more examples and ideas, visit: https://docs.docker.com/get-started/
"

#! Development Workflow
1. We create a Dockerfile in the root of our project which contains the instructions to build the image. This image contains everything needed to run the application. 
2. The image can contain:
a) a cut-down OS
b) a runtime environment
c) application files
d) third-party libraries
e) environment variables
f) config files

* Once we have a image, we tell docker to start a container using that image.
* We can then use that container to run our application.
* docker run <image name> => This will start a container based on the image

* Once we complete our application, we can create a image and push it to the registry i.e Docker Hub which is similar to the concept of Git and GitHub.
* "docker push <image name>" => This will push the image to the registry
* Then you can pull it to any machine using "docker pull <image name>"

#! Docker in Action ( A small walkthrough )
Steps:
1. Start with an OS
2. Install Node
3. Copy app files
4. Run "node app.js"

1. Create a HELLO-DOCKER directory
2. Create a app.js file with a console message.
3. Test app.js working with "node app.js"
4. Create a Dockerfile with instructions to build the image:
"
#! We are using # Use Node.js Alpine image as the base image from the DockerHub
FROM node:alpine

#! Copy all the files in the present directory to a new directory named "app" inside the container
COPY . /app 

#! Approach 1 (Run the command by giving the complete path)
# CMD node /app/app.js   

#! Approach 2 (Run the command by giving the relative path i.e set the working directory first, then run the command)
#! Set the working directory inside the container to "/app"
WORKDIR /app

#! Run the command "node app.js"
# CMD node app.js

#! Run the command to start the application
CMD ["node", "app.js"]
"
5. Now we need to build our image.
6. "docker build -t hello-docker .\HELLO-DOCKER\" => This will build the image. 
* -t means tag it with hello-docker.
* .\HELLO-DOCKER\ means the directory where our Dockerfile is located.
"
PS D:\Ultimate-Docker-Series> docker build -t hello-docker .\HELLO-DOCKER\
[+] Building 1.1s (8/8) FINISHED                                                                                                                                                                                                          docker:desktop-linux
 => [internal] load build definition from Dockerfile                                                                                                                                                                                                      0.0s
 => => transferring dockerfile: 664B                                                                                                                                                                                                                      0.0s 
 => [internal] load metadata for docker.io/library/node:alpine                                                                                                                                                                                            1.0s 
 => [internal] load .dockerignore                                                                                                                                                                                                                         0.0s 
 => => transferring context: 2B                                                                                                                                                                                                                           0.0s 
 => [internal] load build context                                                                                                                                                                                                                         0.0s 
 => => transferring context: 57B                                                                                                                                                                                                                          0.0s 
 => [1/3] FROM docker.io/library/node:alpine@sha256:be6983df6443f143f9e9ba8dff99b44c14556093abc8d1501064a1aff2c372d4                                                                                                                                      0.0s 
 => CACHED [2/3] COPY . /app                                                                                                                                                                                                                              0.0s 
 => CACHED [3/3] WORKDIR /app                                                                                                                                                                                                                             0.0s 
 => exporting to image                                                                                                                                                                                                                                    0.0s 
 => => exporting layers                                                                                                                                                                                                                                   0.0s 
 => => writing image sha256:91df74adca9298f2a48b703c0c24871234b4f1b8a5c9361bc50fbf33baf78bd4                                                                                                                                                              0.0s 
 => => naming to docker.io/library/hello-docker                                                                                                                                                                                                           0.0s 

View build details: docker-desktop://dashboard/build/desktop-linux/desktop-linux/veuycsvmzak1es37extj48e68

What's next:
    View a summary of image vulnerabilities and recommendations → docker scout quickview
"
7. Type "docker image ls" or "docker images" to see all the images we have created.
"
PS D:\Ultimate-Docker-Series> docker image ls
REPOSITORY        TAG          IMAGE ID       CREATED         SIZE  
hello-docker      latest       91df74adca92   6 minutes ago   151MB 
mysql             8.0          6c54cbcf775a   3 weeks ago     572MB 
redis             latest       9c893be668ac   2 months ago    116MB 
redis             6.2-alpine   d21be8aaaa15   2 months ago    30.1MB
rnwood/smtp4dev   latest       58668bdb6a17   2 months ago    300MB 
rnwood/smtp4dev   v3           58668bdb6a17   2 months ago    300MB 
hello-world       latest       d2c94e258dcb   14 months ago   13.3kB
"
8. Type "docker run hello-docker" to run the image.
"
PS D:\Ultimate-Docker-Series> docker run hello-docker
Hello Docker!
"

----------------------------------------------------------------------------------------------------------------------------------------------------------

#* Section - 2 - Linux Command Line
Docker is build on basic Linux concepts.
Most Docker related stuff are based on Linux commands.
Linux is like English and a very powerful command line.

#! Linux Distribution
1. They are open source software.
2. They are free to use.
3. Famous Distros: Ubuntu, Debian, Alpine, Fedora, CentOS
4. We will be using Ubuntu

#! Running Linux
1. Go to DockerHub and search fot Ubuntu. The command to get it is "docker pull ubuntu"
2. But we will use "docker run ubuntu" because it will start a container based on the image "ubuntu" but for the first time when the image is not found, it will execute "docker pull ubuntu" and then start the container of Ubuntu.
"
PS D:\Ultimate-Docker-Series> docker run ubuntu
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
9c704ecd0c69: Pull complete
Digest: sha256:2e863c44b718727c860746568e1d54afd13b2fa71b160f5cd9058fc436217b30
Status: Downloaded newer image for ubuntu:latest
"
3. Type "docker ps" to see all the running containers.
4. Type "docker ps -a" to see all the containers that were stopped and are not running.
"
PS D:\Ultimate-Docker-Series> docker ps        
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
PS D:\Ultimate-Docker-Series> docker ps -a
CONTAINER ID   IMAGE                    COMMAND                  CREATED              STATUS                          PORTS     NAMES
8331306a8c1e   ubuntu                   "/bin/bash"              About a minute ago   Exited (0) About a minute ago             interesting_jepsen
459ddacf061f   hello-docker             "docker-entrypoint.s…"   2 hours ago          Exited (0) 2 hours ago                    funny_wright      
e280f4894d5b   hello-world              "/hello"                 19 hours ago         Exited (0) 19 hours ago                   wizardly_jackson  
b5ff72a96c1e   redis                    "docker-entrypoint.s…"   5 days ago           Exited (0) 5 days ago                     wizardly_cray     
5030f5746047   rnwood/smtp4dev:latest   "dotnet /app/Rnwood.…"   2 weeks ago          Exited (0) 2 weeks ago                    boring_bouman
"
5. Type "docker stop <container id>" to stop the container.
6. Type "docker start <container id>" to start the container.

7. Type "docker run -it ubuntu" to start the ubuntu container in an interactive mode.
8. Type "docker run -it ubuntu bash" to start the ubuntu container in an interactive mode with bash shell.
"
PS D:\Ultimate-Docker-Series> docker run -it ubuntu
root@a20f32bebd50:/# 
"
* By default, we are logged in as a root user. We can switch to another user using "sudo" command.
* After the "@" sign, we have the name of the machine we are working on. Docker by default sets the id of the machine as the name of the container here.
* After the ":" sign, we have the present directory which is root(/) for now.
* The "#" sign means I have the highest privileges as I am a root user.
"
PS D:\Ultimate-Docker-Series> docker run -it ubuntu
root@a20f32bebd50:/# ls
bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@a20f32bebd50:/# cd home/
root@a20f32bebd50:/home#
"

#? Linux Commands:
* echo => Prints a message
* whoami => Prints the current user
* pwd => Prints the present working directory
* ls => Lists the files in the current directory
* cd => Changes the current directory
* echo $0 => Prints the path to bash
* history => Prints the command history

#! Managing Packages
Some of the famous package managers are:
* apt (default package manager in Ubuntu and other popular distros)
* pip 
* npm

"
PS D:\Ultimate-Docker-Series> docker run -it ubuntu
root@c06cc73cc487:/# apt
apt 2.7.14 (amd64)
Usage: apt [options] command

apt is a commandline package manager and provides commands for        
searching and managing as well as querying information about packages.
It provides the same functionality as the specialized APT tools,      
like apt-get and apt-cache, but enables options more suitable for     
interactive use by default.

Most used commands:
  list - list packages based on package names
  search - search in package descriptions
  show - show package details
  install - install packages
  reinstall - reinstall packages
  remove - remove packages
  autoremove - automatically remove all unused packages
  update - update list of available packages
  upgrade - upgrade the system by installing/upgrading packages
  full-upgrade - upgrade the system by removing/installing/upgrading packages
  edit-sources - edit the source information file
  satisfy - satisfy dependency strings

See apt(8) for more information about the available commands.
Configuration options and syntax is detailed in apt.conf(5).
Information about how to configure sources can be found in sources.list(5).
Package and version choices can be expressed via apt_preferences(5).
Security details are available in apt-secure(8).
This APT has Super Cow Powers.
"
1. Type "apt list" to list all the installed packages.
2. Type "apt search <package name>" to search in package descriptions.
3. Type "apt show <package name>" to show package details.
4. Type "apt install <package name>" to install packages.
5. Type "apt reinstall <package name>" to reinstall packages.
6. Type "apt remove <package name>" to remove packages.
7. Type "apt autoremove" to automatically remove all unused packages.
8. Type "apt update" to update list of available packages.
9. Type "apt upgrade" to upgrade the system by installing/upgrading packages.
10. Type "apt full-upgrade" to upgrade the system by removing/installing/upgrading packages.
11. Type "apt list --upgradable" to list packages that can be upgraded.

** Use "sudo" to run the commands as the root user.
* Install python package => sudo apt install python3
* To verify the installation of python => python3 --version

#! Linux File System
1. In Windows, we have "C:\" as the root directory. Inside it, we have directories such as "Program Files", "Users", etc.
2. In Linux, we have "/" as the root directory. Inside it, we have directories such as:
* "bin"
* "boot"
* "dev"
* "etc"
* "home"
* "root"
* "lib"
* "var"
* "proc", etc

3. In Linux, everything is a file. We can create a file using the "touch" command.

#! Navigating The File System
1. Type "pwd" to print the present working directory.
2. Type "ls" to list the files in the current directory.
3. Type "ls -a" to list the files in the current directory with hidden files.
4. Type "ls -1" to list the files in the current directory in single line format.
5. Type "ls -l" to list the files in the current directory with details.
6. Type "cd" to change the current directory.
7. Type "cd bin" to change the current directory to "bin". "bin" contains all the binaries, libraries, etc.
8. Type "cd /" to change the current directory to "/" i.e the root or base directory.
9. Type "cd ~" to change the current directory to "~" i.e the /home directory but for root users, ~ means /root directory.
For regular users, cd ~ changes the directory to /home/$USER.
For the root user, cd ~ changes the directory to /root.

#! Manipulating Files and Directories
1. Type "mkdir <directory name>" to create a new directory.
2. Type "mv <old file name> <new file name>" to rename a file.
3. Type "rm <file name>" to delete a file.
4. Type "touch <file name>" to create a new file.
5. Type "touch file1.txt file2.txt file3.txt" to create multiple files.
6. Type "mv hello.txt /abcd" to move the file "hello.txt" to the directory "/abcd"
7. Type "rm -rf /abcd" to delete the directory "/abcd"
rm: This is the basic command used to remove files or directories.
-r or -R: This option tells rm to remove directories and their contents recursively. Without this option, rm would not remove directories.
-f: This option forces the deletion of files and directories without prompting for confirmation. Normally, rm might ask for confirmation if a file is write-protected, but -f bypasses this check.
/abcd: Specifies the target directory to be removed. In this case, it refers to a directory named abcd located at the root (/) of the filesystem.

#! Editing and Viewing Files
1. "apt install nano"
2. "nano hello.txt"
3. Type "cat hello.txt" to view the content of a file.
4. Type "echo "Hello World" > hello.txt" to write a text to a file.
5. Type "more hello.txt" to view the content of a file in multiple lines.
6. Type "less hello.txt" to view the content of a file in multiple lines.
7. Type "head -n 5 hello.txt" to view the first 5 lines of a file.
8. Type "tail -n 5 hello.txt" to view the last 5 lines of a file.

#! Redirections
1. Linux follows the concept of standard input and output.
2. The standard input is the keyboard and the standard output is the screen. This is called "redirection".
3. Standard input and standard output are connected to the terminal.
4. The "redirection" operator or symbol is "<" and ">".
* "echo hello > hello.txt" will write "hello" to the file "hello.txt".
* "cat file1.txt > file2.txt" will copy the content of the file "file1.txt" to the file "file2.txt".
* "cat file1.txt file2.txt > combined.txt" will copy the content of the files "file1.txt" and "file2.txt" to the file "combined.txt".

Ques) What is the difference between ">>" and ">"?
Ans) The ">>" operator appends the content to the file. The ">" operator overwrites the content of the file.

Ques) I want to redirect the output of a command to a file. How can I do that?
Ans) The ">" operator is used to redirect the output of a command to a file.

Ques) I want to longlist the content in /etc directory to a file. How can I do that?
Ans) The "ls -l /etc > list.txt" command will list the content of /etc directory to the file "list.txt"

#! Searching for Text
1. For searching a text in a file, use the "grep" command.
2. For searching a text in multiple files and folders, use the "grep -r" command.
3. "grep" => global regular expression search
4. "grep hello file1.txt" will search for the text "hello" in the file "file1.txt".
5. "grep -i hello file1.txt" will search for the text "hello" in the file "file1.txt" ignoring the case i.e case insensitive.

Ques) What is the difference between "grep" and "grep -r"?
Ans) The "grep" command searches for the text in a file. The "grep -r" command searches for the text in multiple files including directories and subdirectories.

Ques) What is the difference between "grep -i" and "grep"?
Ans) The "grep -i" command ignores the case i.e case insensitive.

Ques) Find the line with the text "cloud" in the file "list_example.txt"?
"
root@ac9b20fc086f:/# grep cloud list_example.txt 
drwxr-xr-x 2 root root    4096 Jun  5 02:06 cloud
"

Ques) Find "hello" in files starting with "file" keyword?
"
root@ac9b20fc086f:/# echo Hello > file1.txt
root@ac9b20fc086f:/# echo Hello > file2.txt
root@ac9b20fc086f:/# ls
bin  boot  dev  etc  file1.txt  file2.txt  home  lib  lib64  list_example.txt  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
root@ac9b20fc086f:/# grep -i hello file*
file1.txt:Hello
file2.txt:Hello
root@ac9b20fc086f:/#
"

Ques) Find "hello" in any file or folder from the root directory?
"
root@ac9b20fc086f:/# grep -i hello .
grep: .: Is a directory
root@ac9b20fc086f:/# grep -i -r hello .
./file1.txt:Hello
./file2.txt:Hello
./hello.txt:Hello
root@ac9b20fc086f:/#
"
You can also combine the options like "-i -r" into one command. So final command => "grep -ir hello ."

#! Finding Files and Directories
1. "find" => find files and directories
2. "find . -name hello.txt" will find the file "hello.txt" in the current directory.
3. "find . -name *.txt" will find all the files with the extension ".txt" in the current directory.
4. "find /etc" will find all the files in the "/etc" directory.
5. To filter results by size, use the "-size" option.
6. To filter results by type, use the "-type" option.
* "find . -type f" will find all the files in the current directory.
* "find . -type d" will find all the directories in the current directory.
* "find . -type f -name "f*" will find all the files starting with name "f" in the current directory.
"
root@ac9b20fc086f:~# find . -type f -name "f*"
./file1.txt
./file2.txt
"

Ques) Find all the files inn the current directory starting with "f" or "F"?
Ans) 'find . -type f -iname "f*" '

"
root@ac9b20fc086f:~# echo Test File > File123.txt
root@ac9b20fc086f:~# ls
File123.txt  file1.txt  file2.txt
root@ac9b20fc086f:~# find -type f -iname "f*"
./file1.txt
./File123.txt
./file2.txt
root@ac9b20fc086f:~#
"

Ques) Find all the python scripts present in the linux system?
Ans) Type 'find / -type f -name "*.py" ' in the command line
"
root@ac9b20fc086f:~# find / -type f -name "*.py"
/usr/share/apport/package-hooks/source_shadow.py
/usr/share/gdb/auto-load/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33-gdb.py
/usr/share/gcc/python/libstdcxx/v6/__init__.py
/usr/share/gcc/python/libstdcxx/v6/xmethods.py
/usr/share/gcc/python/libstdcxx/v6/printers.py
/usr/share/gcc/python/libstdcxx/__init__.py
"

Ques) Find all the python scripts present in the linux system and store the output in a file?
Ans) Type 'find / -type f -name "*.py" > python-scripts-location.txt' in the command line
"
root@ac9b20fc086f:~# find / -type f -name "*.py" > python-scripts-location.txt
root@ac9b20fc086f:~# cat python-scripts-location.txt 
/usr/share/apport/package-hooks/source_shadow.py
/usr/share/gdb/auto-load/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33-gdb.py
/usr/share/gcc/python/libstdcxx/v6/__init__.py
/usr/share/gcc/python/libstdcxx/v6/xmethods.py
/usr/share/gcc/python/libstdcxx/v6/printers.py
/usr/share/gcc/python/libstdcxx/__init__.py
root@ac9b20fc086f:~#
"

#! Chaining Commands
1. Use ";" to chain commands
"
root@ac9b20fc086f:~# mkdir test; cd test; echo test > test1.txt; echo done
done
root@ac9b20fc086f:~/test# ls
test1.txt
root@ac9b20fc086f:~/test# cat test1.txt 
test
root@ac9b20fc086f:~/test#
"
But this command will fail for mkdir test but the other commands will get executed, if we run the same command again
"
root@ac9b20fc086f:~# mkdir test; cd test; echo test > test1.txt; echo done
done
root@ac9b20fc086f:~/test# ls
test1.txt
root@ac9b20fc086f:~/test# cat test1.txt 
test
root@ac9b20fc086f:~/test# cd ..
root@ac9b20fc086f:~# mkdir test; cd test; echo test > test1.txt; echo done
mkdir: cannot create directory 'test': File exists
done
"
2. To solve this issue, we will use "&&". This is a AND operator. This will execute the command only if the previous command is successful. If any previous command fails, the next command will not be executed.
"
root@ac9b20fc086f:~# mkdir test; cd test; echo test > test1.txt; echo done
mkdir: cannot create directory 'test': File exists
done
root@ac9b20fc086f:~/test# ls
test1.txt
root@ac9b20fc086f:~/test# cd ..
root@ac9b20fc086f:~# ls
File123.txt  file1.txt  file2.txt  python-scripts-location.txt  test
root@ac9b20fc086f:~# mkdir test && cd test && echo test > test1.txt && echo done
mkdir: cannot create directory 'test': File exists
"
3. Use "||" to chain commands. This is a OR operator. So if the first command executes successfully, the next command will not be executed. If the first command fails, the next command will be executed.
"
root@ac9b20fc086f:~# mkdir test || echo "test directory already exists"
mkdir: cannot create directory 'test': File exists
test directory already exists
root@ac9b20fc086f:~# mkdir test2 || echo "test directory already exists"
root@ac9b20fc086f:~#
"

Ques) What is the difference between "&&" and "||"?
Ans) The "&&" operator will execute the command only if the previous command is successful. The "||" operator will execute the command only if the previous command fails. They are the AND and OR operators respectively.

4. We can also use piping (" | ") to chain commands. This is a vertical bar. The output of one command will be the input of the next command. This is called piping.
Example -> echo hello > hello.txt | cat hello.txt  

5. Use "\" to escape characters and go to the next line to write the command.

#! Environment Variables
1. Environment Variables are used to store secret key value pairs data in the system.
2. Type "printenv" to see all the environment variables in the system
"
root@ac9b20fc086f:~# printenv
HOSTNAME=ac9b20fc086f
PWD=/root
HOME=/root
LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:
TERM=xterm
SHLVL=1
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
_=/usr/bin/printenv
OLDPWD=/root/test
"
3. To see any specific environment variable we can use: "printenv VARIABLE_NAME"
"
root@ac9b20fc086f:~# printenv PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
"
4. Another way to see any particular environment variable is: "echo $VARIABLE_NAME"
"
root@ac9b20fc086f:~# echo $PATH
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
"

#TODO => After typing "exit", the current session of our ubuntu container will be terminated. Type "docker ps" to see all the running containers. Type "docker ps -a" to see all the containers that were stopped and are not running. From the output of "docker ps -a" type "docker start -i <container id>" to start the container we were using before in interactive mode. Type "docker stop <container id>" to stop the container.

5. Type "echo DB_USER=ayush >> .bashrc" to append and add a new environment variable to our .bashrc file.

#! Managing Processes
1. Type "ps" to see all the running processes. 
2. Type "kill <process id>" to kill a particular process.
"
root@ac9b20fc086f:~# ps
  PID TTY          TIME CMD 
    1 pts/0    00:00:00 bash
  248 pts/0    00:00:00 ps  
root@ac9b20fc086f:~# kill 248
"

#! Managing Users
1. Type "useradd" to see all the available options to use this command.
"
root@ac9b20fc086f:~# useradd  
Usage: useradd [options] LOGIN
       useradd -D
       useradd -D [options]

Options:
      --badname                 do not check for bad names
  -b, --base-dir BASE_DIR       base directory for the home directory of the
                                new account
      --btrfs-subvolume-home    use BTRFS subvolume for home directory
  -c, --comment COMMENT         GECOS field of the new account
  -d, --home-dir HOME_DIR       home directory of the new account
  -D, --defaults                print or change default useradd configuration
  -e, --expiredate EXPIRE_DATE  expiration date of the new account
  -f, --inactive INACTIVE       password inactivity period of the new account
  -F, --add-subids-for-system   add entries to sub[ud]id even when adding a system user
  -g, --gid GROUP               name or ID of the primary group of the new
                                account
  -G, --groups GROUPS           list of supplementary groups of the new
                                account
  -h, --help                    display this help message and exit
  -k, --skel SKEL_DIR           use this alternative skeleton directory
  -K, --key KEY=VALUE           override /etc/login.defs defaults
  -l, --no-log-init             do not add the user to the lastlog and
                                faillog databases
  -m, --create-home             create the user's home directory
  -M, --no-create-home          do not create the user's home directory
  -N, --no-user-group           do not create a group with the same name as
                                the user
  -o, --non-unique              allow to create users with duplicate
                                (non-unique) UID
  -p, --password PASSWORD       encrypted password of the new account
  -r, --system                  create a system account
  -R, --root CHROOT_DIR         directory to chroot into
  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files
  -s, --shell SHELL             login shell of the new account
  -u, --uid UID                 user ID of the new account
  -U, --user-group              create a group with the same name as the user
  -Z, --selinux-user SEUSER     use a specific SEUSER for the SELinux user mapping
      --extrausers              Use the extra users database

root@ac9b20fc086f:~#
"
2. Create a user named "ayush" and check the output of "cat /etc/passwd"
"
root@ac9b20fc086f:~# useradd -m ayush

root@ac9b20fc086f:~# cat /etc/passwd
root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin
bin:x:2:2:bin:/bin:/usr/sbin/nologin
sys:x:3:3:sys:/dev:/usr/sbin/nologin
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/usr/sbin/nologin
man:x:6:12:man:/var/cache/man:/usr/sbin/nologin
lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin
mail:x:8:8:mail:/var/mail:/usr/sbin/nologin
news:x:9:9:news:/var/spool/news:/usr/sbin/nologin
uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin
proxy:x:13:13:proxy:/bin:/usr/sbin/nologin
www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin
backup:x:34:34:backup:/var/backups:/usr/sbin/nologin
list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin
irc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin
_apt:x:42:65534::/nonexistent:/usr/sbin/nologin
nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin
ubuntu:x:1000:1000:Ubuntu:/home/ubuntu:/bin/bash
ayush:x:1001:1001::/home/ayush:/bin/sh
"
3. Type "usermod" to see all the options available for usermod
"
root@ac9b20fc086f:~# usermod
Usage: usermod [options] LOGIN

Options:
  -a, --append                  append the user to the supplemental GROUPS
                                mentioned by the -G option without removing        
                                the user from other groups
  -b, --badname                 allow bad names
  -c, --comment COMMENT         new value of the GECOS field
  -d, --home HOME_DIR           new home directory for the user account
  -e, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
  -f, --inactive INACTIVE       set password inactive after expiration
                                to INACTIVE
  -g, --gid GROUP               force use GROUP as new primary group
  -G, --groups GROUPS           new list of supplementary GROUPS
  -h, --help                    display this help message and exit
  -l, --login NEW_LOGIN         new value of the login name
  -L, --lock                    lock the user account
  -m, --move-home               move contents of the home directory to the
                                new location (use only with -d)
  -o, --non-unique              allow using duplicate (non-unique) UID
  -p, --password PASSWORD       use encrypted password for the new password        
  -P, --prefix PREFIX_DIR       prefix directory where are located the /etc/* files
  -r, --remove                  remove the user from only the supplemental GROUPS  
                                mentioned by the -G option without removing        
                                the user from other groups
  -R, --root CHROOT_DIR         directory to chroot into
  -s, --shell SHELL             new login shell for the user account
  -u, --uid UID                 new UID for the user account
  -U, --unlock                  unlock the user account
  -v, --add-subuids FIRST-LAST  add range of subordinate uids
  -V, --del-subuids FIRST-LAST  remove range of subordinate uids
  -w, --add-subgids FIRST-LAST  add range of subordinate gids
  -W, --del-subgids FIRST-LAST  remove range of subordinate gids
  -Z, --selinux-user SEUSER     new SELinux user mapping for the user account
"
4. Now to change the default configuration from shell to bash for user named "ayush", type "usermod -s /bin/bash ayush". Now check again using "cat /etc/passwd"

5. Now in a new terminal, type "docker exec -it -u ayush <container_id_of_ubuntu> bash"
"
PS D:\Ultimate-Docker-Series> docker ps
CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES
ac9b20fc086f   ubuntu    "/bin/bash"   19 hours ago   Up 19 hours             jolly_dijkstra
PS D:\Ultimate-Docker-Series> docker exec -it -u ayush ac9b20fc086f bash
ayush@ac9b20fc086f:/$ pwd
/
ayush@ac9b20fc086f:/$ cd ~
ayush@ac9b20fc086f:~$ pwd
/home/ayush
ayush@ac9b20fc086f:~$ 
"
6. Delete the user named "ayush" using "userdel ayush"

#? Managing Users Summary
1. To see all the users, use "cat /etc/passwd"
2. To create a new user, use "useradd <username>"
3. To change any default configuration of a user, use "usermod <configuration option> <username>"
4. To delete a user, use "userdel <username>"
5. To check the password of a particular user, use "cat /etc/passwd | grep <username>" or "grep <username> /etc/passwd"

#TODO => A latest update for "useradd" is "adduser" which is more interactive and uses "useradd" under the hood. Use "apt install adduser" first.

#! Managing Groups
1. Groups are used to group users together. To see all the groups of the present user, use "groups"
"
root@ac9b20fc086f:~# groups
root
"

#? Managing Groups Summary
0. To see the present user's group, use "groups" and to see the groups of any other user, use "groups <username>"
"
root@ac9b20fc086f:/# groups
root

root@ac9b20fc086f:/# groups ayush
ayush : ayush developers
"
1. To see all the groups, use "cat /etc/group"
2. To create a new group, use "groupadd <groupname>"
3. To add any user to this group, use "usermod -G <groupname> -a <username>"
4. To change any default configuration of a group, use "groupmod <configuration option> <groupname>"
5. To delete a group, use "groupdel <groupname>"

#! File Permissions
1. ".sh" entension files are called shell scripts.
2. Type "echo echo hello ayush > deploy.sh" to create a file named "deploy.sh" with content "echo hello ayush"
3. To check the permissions of a file, use "ls -l <filename>"
"
root@ac9b20fc086f:/home# ls -l
total 12
drwxr-x--- 2 ayush  ayush  4096 Jul 25 10:40 ayush
-rw-r--r-- 1 root   root     17 Jul 25 10:43 deploy.sh
drwxr-x--- 2 ubuntu ubuntu 4096 Jun  5 02:06 ubuntu

root@ac9b20fc086f:/home# ls -l deploy.sh 
-rw-r--r-- 1 root root 17 Jul 25 10:43 deploy.sh
"
* "d" => directory
* "r" => read
* "w" => write
* "x" => execute
* "-" => no permission
* Each group has 3 permissions (rwx)
* After "d", first comes the permission for "root", second comes the permission for group, third comes the permission for others.
Example -> "drwxr-x--- 2 ayush  ayush  4096 Jul 25 10:40 ayush", here "d" means this is a directory, group 1 i.e the "ayush" has read write execute permissions, group 2 i.e the "ayush" group has read and execute permissions and group 3 i.e any anonymous users has no permissions.

4. To execute the file, use "./deploy.sh"
"
root@ac9b20fc086f:/home# ./deploy.sh
bash: ./deploy.sh: Permission denied
"
5. To change the permissions of a file, use "chmod <audience> <permissions> <filename>"
#? "chmod u=rwx,g=rx,o=rx <filename>" => u for user, g for group, o for others. Provide permissions in "rwx" format.

#? "r" => (4) => read
#? "w" => (2) => write
#? "x" => (1) => execute

#? "chmod 755 deploy.sh" => u=rwx,g=rx,o=rx deploy.sh

Example:
"root@ac9b20fc086f:/home# ls -l
total 12
drwxr-x--- 2 ayush  ayush  4096 Jul 25 10:40 ayush    
-rw-r--r-- 1 root   root     17 Jul 25 10:43 deploy.sh
drwxr-x--- 2 ubuntu ubuntu 4096 Jun  5 02:06 ubuntu   
root@ac9b20fc086f:/home# chmod 744 deploy.sh 

root@ac9b20fc086f:/home# ls -l
total 12
drwxr-x--- 2 ayush  ayush  4096 Jul 25 10:40 ayush
-rwxr--r-- 1 root   root     17 Jul 25 10:43 deploy.sh
drwxr-x--- 2 ubuntu ubuntu 4096 Jun  5 02:06 ubuntu

root@ac9b20fc086f:/home# ./deploy.sh 
hello ayush

root@ac9b20fc086f:/home#
"

#! Run a container in an interactive mode
"
PS C:\Users\CZ0258\Desktop> docker ps
CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES
ac9b20fc086f   ubuntu    "/bin/bash"   21 hours ago   Up 21 hours             jolly_dijkstra
"

"
PS C:\Users\CZ0258\Desktop> docker exec -it ac9b20fc086f /bin/bash
root@ac9b20fc086f:/# ls
bin  boot  dev  etc  file1.txt  file2.txt  home  lib  lib64  list_example.txt  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var
"

-----------------------------------------------------------------------------------------------------------------------------------------------------------

#* Section - 3 - (Build Images)
* Creating Docker files
* Versioning images
* Sharing images
* Saving and loading images
* Reducing the image size
* Speeding up builds

#! Images and Containers
* Image -> Image includes everything an application needs to run. It includes cut-down OS, third-party libraries, application files, env variables, etc.
* Container -> Container is an isolated environment for executing an application. Kind off a virtual machine. It can be stopped & restarted. It is just a process.